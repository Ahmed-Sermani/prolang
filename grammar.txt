prog            → declaration* EOF ;
declaration     → varDeclaration | statement | funcDeclaration ;
funcDeclaration → "func" function ;
function        → IDENTIFIER "(" parameters? ")" block ;
parameters      → IDENTIFIER ( "," IDENTIFIER )* ; 
varDeclaration  → "let" IDENTIFIER ( "=" expression )? ";" ;
statement       → exprStatement | printStatement | block | ifStatement | whileStatement | forStatement | returnStatement;
returnStatement → "return" expression? ";" ;
forStatement    → "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement ;
whileStmt       → "while" "(" expression ")" statement ;
ifStatement     → "if" "(" expression ")" statement ( "else" statement )? ;
block           → "{" declaration* "}" ;
exprStatement   → expression ";" ;
printStmt       → "print" expression ";" ;
expression      → assignment ;
assignment      → IDENTIFIER "=" assignment | logicalOr ;
logicalOr       → logicalAnd ( "or" logicalAnd )* ;
logicalAnd      → equality ( "and" equality )* ;
equality        → comparison ( ( "!=" | "==" ) comparison )* ;
comparison      → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term            → factor ( ( "-" | "+" ) factor )* ;
factor          → unary ( ( "/" | "*" ) unary )* ;
unary           → ( "!" | "-" ) unary | call ;
call            → primary ( "(" arguments? ")" )* ;
arguments       → expression ( "," expression )* ;
primary         → NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER ;